from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, Session as SQLSession
from sqlalchemy.ext.declarative import declarative_base

from libs.bot_async_messaging import AsyncBot
from libs.updater_async import AsyncUpdater

import re
from config import psql_credentials, TOKEN, request_kwargs

engine = create_engine(f'postgresql+psycopg2://{psql_credentials["user"]}:{psql_credentials["pass"]}@'
                       f'{psql_credentials["host"]}:{psql_credentials["port"]}/{psql_credentials["dbname"]}',
                       echo=False)

Session = sessionmaker(bind=engine, autoflush=False)
session: SQLSession = Session()
Base = declarative_base()

bot = AsyncBot(token=TOKEN, workers=16, request_kwargs=request_kwargs)
updater = AsyncUpdater(bot=bot)

dispatcher = updater.dispatcher
job = updater.job_queue

bot.dispatcher = dispatcher


game_classes = ["‚öóÔ∏è–ê–ª—Ö–∏–º–∏–∫", "‚öí–ö—É–∑–Ω–µ—Ü", "üì¶–î–æ–±—ã—Ç—á–∏–∫", "üèπ–õ—É—á–Ω–∏–∫", "‚öî–†—ã—Ü–∞—Ä—å", "üõ°–ó–∞—â–∏—Ç–Ω–∏–∫"]


sex_selected = ['üë® –ü–∞—Ä–µ–Ω—å', 'üë© –î–µ–≤—É—à–∫–∞']


def multiple_replace(dic, text) -> str:
    pattern = "|".join(map(re.escape, dic.keys()))
    return re.sub(pattern, lambda m: dic[m.group()], text)


def set_sexs(base_text: str, my_sex: int, parner_sex: int) -> str:
    my = {'[q]': ['–∫', '—Ü–∞'], '[w]': ['–∫—É', '—Ü–µ'], '[e]': ['–∫–æ–º', '—Ü–µ–π'], '[r]': ['', '–∞'], '[t]': ['—Å—è', '–∞—Å—å'],
          '[y]': ['–π', '—è'], '[u]': ['–≥–æ', '—ë'], '[i]': ['–º—É', '–π'], '[o]': ['—ë–ª', '–ª–∞'], '[p]': ['—ã–π', '–∞—è'],
          '[a]': ['–µ–≥–æ', '—é'], '[b]': ['–∫–∞', '—Ü—É'], '[s]': ['–∏–º', '–µ–π'], '[d]': ['–≥–æ', '–µ–π'], '[f]': ['–∫–∞', '—Ü—ã']}
    parner = {'[qq]': ['–∫', '—Ü–∞'], '[ww]': ['–∫—É', '—Ü–µ'], '[ee]': ['–∫–æ–º', '—Ü–µ–π'], '[rr]': ['', '–∞'],
              '[tt]': ['—Å—è', '–∞—Å—å'], '[yy]': ['–π', '—è'], '[uu]': ['–≥–æ', '—ë'], '[ii]': ['–º—É', '–π'], '[oo]': ['—ë–ª', '–ª–∞'],
              '[pp]': ['—ã–π', '–∞—è'], '[aa]': ['–µ–≥–æ', '—é'], '[bb]': ['–∫–∞', '—Ü—É'], '[ss]': ['–∏–º', '–µ–π'], '[dd]': ['–≥–æ', '–µ–π'],
              '[ff]': ['–∫–∞', '—Ü—ã']}

    for i in my:
        my[i] = my[i][my_sex]
    for i in parner:
        parner[i] = parner[i][parner_sex]
    my.update(parner)
    return multiple_replace(my, base_text)